{"pageProps":{"content":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <p>※ <a href=\"https://yushi-dev.hatenablog.com/entry/2023/02/19/231829\">https://yushi-dev.hatenablog.com/entry/2023/02/19/231829</a> の転載です。</p>\n    <p>自作ブログを作っています。</p>\n    <p><a href=\"https://yushi-dev.hatenablog.com/archive/category/%E8%87%AA%E4%BD%9C%E3%83%96%E3%83%AD%E3%82%B0\">https://yushi-dev.hatenablog.com/archive/category/%E8%87%AA%E4%BD%9C%E3%83%96%E3%83%AD%E3%82%B0</a></p>\n    <p>技術スタック</p>\n    <ul>\n      <li>TypeScript</li>\n      <li>React</li>\n      <li>Next.js</li>\n      <li>Styled Components</li>\n      <li>GitHub Pages</li>\n    </ul>\n    <h3>remark の導入</h3>\n    <p>Next.js の公式ドキュメントでは、Markdown を render する仕組みとして<code>remark</code>を紹介しています。</p>\n    <ul>\n      <li><a href=\"https://nextjs.org/learn/basics/dynamic-routes/render-markdown\">Next.js の公式ドキュメント</a></li>\n      <li><a href=\"https://github.com/remarkjs/remark\">remark</a></li>\n    </ul>\n    <p>今回はこちらを利用します。</p>\n    <pre><code class=\"hljs language-sh\">npm i remark remark-html remark-gfm\n</code></pre>\n    <p>remark-gfm は、テーブルなどいくつかの拡張的な記述方法のためのプラグインです。</p>\n    <h3>Markdown ファイルの parser</h3>\n    <p>ファイルの読み込みと、markdown を html に parse する仕組みを合わせた utility を用意します。</p>\n    <pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// markdown-utils.ts</span>\n\n<span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'fs'</span>\n<span class=\"hljs-keyword\">import</span> { remark } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'remark'</span>\n<span class=\"hljs-keyword\">import</span> remarkGfm <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'remark-gfm'</span>\n<span class=\"hljs-keyword\">import</span> html <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'remark-html'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">convertToHtml</span>(<span class=\"hljs-params\">md: <span class=\"hljs-built_in\">string</span></span>) {\n  <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">remark</span>().<span class=\"hljs-title function_\">use</span>(html).<span class=\"hljs-title function_\">use</span>(remarkGfm).<span class=\"hljs-title function_\">process</span>(md)\n\n  <span class=\"hljs-keyword\">return</span> result.<span class=\"hljs-title function_\">toString</span>()\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">loadFile</span>(<span class=\"hljs-params\">filePath: <span class=\"hljs-built_in\">string</span></span>) {\n  <span class=\"hljs-keyword\">const</span> contents = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">convertToHtml</span>(\n    fs.<span class=\"hljs-title function_\">readFileSync</span>(filePath, { <span class=\"hljs-attr\">encoding</span>: <span class=\"hljs-string\">'utf8'</span> })\n  )\n\n  <span class=\"hljs-keyword\">return</span> { contents }\n}\n</code></pre>\n    <p>Markdown の色々な記述方法を含むサンプルファイルを用意します。</p>\n    <pre><code class=\"hljs language-markdown\">(sample.md)\n\n<span class=\"hljs-section\"># Sample</span>\n\n<span class=\"hljs-section\">## サブタイトル</span>\n\n<span class=\"hljs-section\">### 文字装飾</span>\n\nサンプルです。\n\n<span class=\"hljs-emphasis\">_イタリック_</span>\n\n<span class=\"hljs-strong\">**太文字**</span>\n\n<span class=\"hljs-section\">### リスト</span>\n\n<span class=\"hljs-bullet\">-</span> データ 1\n<span class=\"hljs-bullet\">-</span> データ 2\n\n<span class=\"hljs-bullet\">1.</span> 手順 1\n<span class=\"hljs-bullet\">2.</span> 手順 2\n\n<span class=\"hljs-section\">### テーブル</span>\n\n| a   | b   |\n| --- | --- |\n| c   | d   |\n| e   | f   |\n</code></pre>\n    <p>これを、/posts に配置します。</p>\n    <p>上記の/posts 以下のファイルを読み込むためのメソッドを用意します。<br>先ほど作った<code>markdown-utils.ts</code>を利用しています。</p>\n    <pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// post-service.ts</span>\n\n<span class=\"hljs-keyword\">import</span> path <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'path'</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> markdownUtils <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/utils/markdown-utils'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">loadMarkdown</span>(<span class=\"hljs-params\">slug: <span class=\"hljs-built_in\">string</span></span>) {\n  <span class=\"hljs-keyword\">const</span> postDir = path.<span class=\"hljs-title function_\">join</span>(process.<span class=\"hljs-title function_\">cwd</span>(), <span class=\"hljs-string\">'posts'</span>)\n  <span class=\"hljs-keyword\">const</span> fullPath = path.<span class=\"hljs-title function_\">join</span>(postDir, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${slug}</span>.md`</span>)\n\n  <span class=\"hljs-keyword\">return</span> markdownUtils.<span class=\"hljs-title function_\">loadFile</span>(fullPath)\n}\n</code></pre>\n    <p>最後に、pages 以下に先程用意した sample.md に対応するページを表示するためのファイルを用意します。</p>\n    <pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// sample.tsx</span>\n\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> postService <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/services/post-service'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getStaticProps</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> postData = <span class=\"hljs-keyword\">await</span> postService.<span class=\"hljs-title function_\">loadMarkdown</span>(<span class=\"hljs-string\">'sample'</span>)\n\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">props</span>: {\n      <span class=\"hljs-attr\">contents</span>: postData.<span class=\"hljs-property\">contents</span>,\n    },\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Slug</span> = (<span class=\"hljs-params\">{ contents }</span>) => {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">dangerouslySetInnerHTML</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">__html:</span> <span class=\"hljs-attr\">contents</span> }} /></span>\n    <span class=\"hljs-tag\">&#x3C;/></span></span>\n  )\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Slug</span>\n</code></pre>\n    <h3>スクリーンショット</h3>\n    <p>\n      画面が表示できるようになりました。<br>Markdown の各記述がうまく parse されています。\n      \n      <img src=\"ss.png\" alt=\"スクリーンショット\">\n    </p>\n    <h3>Pull Request</h3>\n    <p><a href=\"https://github.com/nek0meshi/blog/pull/3\">https://github.com/nek0meshi/blog/pull/3</a></p>\n    <h3>あとがき</h3>\n    <p>最近はハリポタを読んでいます。学生時代ぶりです。とても面白いです。</p>\n  </body>\n</html>\n","title":"【自作ブログ 2】Markdownをparseする","date":"2023-02-19","matters":[{"slug":"2023-frontend-developer-roadmap","title":"2023年版Frontend Developer Roadmapを見てみる","date":"2023-08-21"},{"slug":"20250619-bff","title":"BFF（Backend For Frontend）とは","date":"2025-06-19"},{"slug":"20250620-db-transaction-lock","title":"DBのトランザクションとロック","date":"2026-06-24"},{"slug":"20250624-ai-fullstack","title":"イベント「技術の総合格闘技、生成AI時代のフルスタック開発」","date":"2025-06-24"},{"slug":"20250624-til","title":"TIL 2025/06/24","date":"2025-06-24"},{"slug":"20250624-web-tech-future","title":"2030年までのWeb開発","date":"2025-06-24"},{"slug":"20250627-til","title":"TIL 2025/06/27","date":"2025-06-27"},{"slug":"frontend-2025","title":"【React / Next.js / TypeScript 開発で今押さえておくべきこと（2025年版）】","date":"2025-06-19"},{"slug":"interface-merge","title":"TypeScriptでのInterfaceのマージについて","date":"2024-07-07"},{"slug":"interface-vs-types","title":"TypeScriptのinterfaceとtypeの使い分け","date":"2024-07-06"},{"slug":"material-ui","title":"Material UI: モダンなフロントエンド開発の強力なツール","date":"2024-08-16"},{"slug":"monorepo","title":"モダンフロントエンドとモノレポ","date":"2024-07-07"},{"slug":"my-blog-1","title":"【自作ブログ 1】自作ブログを作りたい","date":"2023-02-06"},{"slug":"my-blog-2","title":"【自作ブログ 2】Markdownをparseする","date":"2023-02-19"},{"slug":"react-vs-svelte","title":"React vs Svelte: モダンウェブ開発の新たな選択肢","date":"2024-07-07"}]},"__N_SSG":true}