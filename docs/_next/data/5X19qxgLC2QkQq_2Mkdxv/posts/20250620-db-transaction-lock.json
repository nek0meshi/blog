{"pageProps":{"content":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <p>現場の Web アプリケーション開発において重要な「トランザクション」「ロック」の概念・使い方・SQL 例を網羅的に解説。</p>\n    <h2>🧱 1. トランザクションとは</h2>\n    <ul>\n      <li>データベースにおける一連の処理の単位</li>\n      <li>整合性を保証するための不可欠な機構</li>\n      <li>ACID 特性（後述）に従う</li>\n    </ul>\n    <h2>🧪 2. ACID 特性</h2>\n    <ul>\n      <li><strong>Atomicity（原子性）</strong>: 全処理が成功 or 全て無効</li>\n      <li><strong>Consistency（一貫性）</strong>: データの整合性を保つ</li>\n      <li><strong>Isolation（独立性）</strong>: 他トランザクションの影響を遮断</li>\n      <li><strong>Durability（永続性）</strong>: コミット後の変更は保持される</li>\n    </ul>\n    <h2>🔹 3. トランザクションの基本構文（SQL）</h2>\n    <pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">START</span> TRANSACTION;\n<span class=\"hljs-comment\">-- 任意の処理</span>\n<span class=\"hljs-keyword\">COMMIT</span>;    <span class=\"hljs-comment\">-- 正常終了</span>\n<span class=\"hljs-keyword\">ROLLBACK</span>;  <span class=\"hljs-comment\">-- 異常終了</span>\n</code></pre>\n    <h2>🤯 4. トランザクション分離レベル（Isolation Level）</h2>\n    <table>\n      <thead>\n        <tr>\n          <th>分離レベル</th>\n          <th>特徴</th>\n          <th>ユースケース例</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>READ UNCOMMITTED</td>\n          <td>ダーティリードあり、整合性保証なし</td>\n          <td>基本使わない</td>\n        </tr>\n        <tr>\n          <td>READ COMMITTED</td>\n          <td>コミット済みのみ読める</td>\n          <td>ブログ表示系</td>\n        </tr>\n        <tr>\n          <td>REPEATABLE READ</td>\n          <td>同じ SELECT 結果は変わらない（幻影行あり）</td>\n          <td>EC 在庫確認</td>\n        </tr>\n        <tr>\n          <td>SERIALIZABLE</td>\n          <td>完全直列化。最も厳密で低速</td>\n          <td>金融系処理</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3>🔧 設定例（SQL）</h3>\n    <pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SET</span> TRANSACTION ISOLATION LEVEL REPEATABLE READ;\n<span class=\"hljs-keyword\">START</span> TRANSACTION;\n<span class=\"hljs-keyword\">SELECT</span> stock <span class=\"hljs-keyword\">FROM</span> products <span class=\"hljs-keyword\">WHERE</span> id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">123</span> <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">UPDATE</span>;\n<span class=\"hljs-comment\">-- 処理</span>\n<span class=\"hljs-keyword\">COMMIT</span>;\n</code></pre>\n    <h2>🔐 5. ロックの種類と用途</h2>\n    <h3>排他ロック（Exclusive Lock / X Lock）</h3>\n    <ul>\n      <li>他トランザクションの読み書きをブロック</li>\n      <li><strong>用途</strong>: 在庫減算、会員ランク加算</li>\n    </ul>\n    <pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> products <span class=\"hljs-keyword\">WHERE</span> id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">UPDATE</span>;\n</code></pre>\n    <h3>共有ロック（Shared Lock / S Lock）</h3>\n    <ul>\n      <li>読み取りは OK、書き込みは禁止</li>\n      <li><strong>用途</strong>: 安全な読み取り用</li>\n    </ul>\n    <pre><code class=\"hljs language-sql\"><span class=\"hljs-comment\">-- MySQL</span>\n<span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> products <span class=\"hljs-keyword\">WHERE</span> id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span> LOCK <span class=\"hljs-keyword\">IN</span> SHARE MODE;\n\n<span class=\"hljs-comment\">-- PostgreSQL</span>\n<span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> products <span class=\"hljs-keyword\">WHERE</span> id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">FOR</span> SHARE;\n</code></pre>\n    <h2>⚙️ 6. ロックの粒度</h2>\n    <ul>\n      <li><strong>テーブルロック</strong>: 全体に影響、基本非推奨</li>\n      <li><strong>行ロック</strong>: 高い並行性、InnoDB や PostgreSQL で使用</li>\n      <li><strong>ページロック</strong>: 一部 DB エンジン内部向け（明示的制御は稀）</li>\n    </ul>\n    <h2>🔀 7. ロック競合とデッドロック</h2>\n    <ul>\n      <li><strong>ロック競合</strong>: 同一リソースにアクセスし待ち状態になる</li>\n      <li><strong>デッドロック</strong>: 相互にロック取得待ちで停止</li>\n    </ul>\n    <h3>✅ 対策</h3>\n    <ul>\n      <li>ロック取得順序の統一</li>\n      <li>トランザクション時間を短く</li>\n      <li>タイムアウト設定</li>\n      <li>DB の自動デッドロック検知（PostgreSQL/MySQL）</li>\n    </ul>\n    <h2>🧠 8. 悲観的ロックと楽観的ロック</h2>\n    <h3>悲観的ロック（Pessimistic Locking）</h3>\n    <ul>\n      <li>事前にロックしてから処理</li>\n      <li>高い衝突可能性に備える</li>\n    </ul>\n    <pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">START</span> TRANSACTION;\n<span class=\"hljs-keyword\">SELECT</span> stock <span class=\"hljs-keyword\">FROM</span> products <span class=\"hljs-keyword\">WHERE</span> id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">123</span> <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">UPDATE</span>;\n<span class=\"hljs-keyword\">UPDATE</span> products <span class=\"hljs-keyword\">SET</span> stock <span class=\"hljs-operator\">=</span> stock <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">WHERE</span> id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">123</span>;\n<span class=\"hljs-keyword\">COMMIT</span>;\n</code></pre>\n    <h3>楽観的ロック（Optimistic Locking）</h3>\n    <ul>\n      <li>更新時に<code>version</code>等で競合チェック</li>\n      <li>軽量・非同期向き</li>\n    </ul>\n    <pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">UPDATE</span>\n</code></pre>\n  </body>\n</html>\n","title":"DBのトランザクションとロック","date":"2026-06-24","matters":[{"slug":"2023-frontend-developer-roadmap","title":"2023年版Frontend Developer Roadmapを見てみる","date":"2023-08-21"},{"slug":"20250619-bff","title":"BFF（Backend For Frontend）とは","date":"2025-06-19"},{"slug":"20250620-db-transaction-lock","title":"DBのトランザクションとロック","date":"2026-06-24"},{"slug":"20250624-ai-fullstack","title":"イベント「技術の総合格闘技、生成AI時代のフルスタック開発」","date":"2025-06-24"},{"slug":"20250624-til","title":"TIL 2025/06/24","date":"2025-06-24"},{"slug":"20250624-web-tech-future","title":"2030年までのWeb開発","date":"2025-06-24"},{"slug":"20250627-til","title":"TIL 2025/06/27","date":"2025-06-27"},{"slug":"frontend-2025","title":"【React / Next.js / TypeScript 開発で今押さえておくべきこと（2025年版）】","date":"2025-06-19"},{"slug":"interface-merge","title":"TypeScriptでのInterfaceのマージについて","date":"2024-07-07"},{"slug":"interface-vs-types","title":"TypeScriptのinterfaceとtypeの使い分け","date":"2024-07-06"},{"slug":"material-ui","title":"Material UI: モダンなフロントエンド開発の強力なツール","date":"2024-08-16"},{"slug":"monorepo","title":"モダンフロントエンドとモノレポ","date":"2024-07-07"},{"slug":"my-blog-1","title":"【自作ブログ 1】自作ブログを作りたい","date":"2023-02-06"},{"slug":"my-blog-2","title":"【自作ブログ 2】Markdownをparseする","date":"2023-02-19"},{"slug":"react-vs-svelte","title":"React vs Svelte: モダンウェブ開発の新たな選択肢","date":"2024-07-07"}]},"__N_SSG":true}