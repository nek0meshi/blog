{"pageProps":{"content":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <p>ソフトウェア開発の現場では、複数のプロジェクトやパッケージをどのように管理するかが重要な課題となっています。モノレポ（monorepo）は、その課題に対する有効なアプローチとして注目されています。本記事では、モノレポの基本から具体的なディレクトリ構造、メリットとデメリット、管理ツールについて解説します。</p>\n    <h2>モノレポとは何か</h2>\n    <p>モノレポ（monorepo）は、複数のプロジェクトやパッケージを一つのリポジトリで管理する手法です。例えば、フロントエンドとバックエンド、共通のライブラリなどを一つのリポジトリ内で一元管理することで、開発プロセスの効率化や依存関係の管理を容易にすることができます。</p>\n    <h2>モノレポの歴史と背景</h2>\n    <p>モノレポの概念は、ソフトウェア開発の進化とともに発展してきました。Google や Facebook などの大規模なテック企業が、効率的な開発と運用のためにモノレポを採用し、その利点が広く認知されるようになりました。彼らは巨大なコードベースを一元管理することで、コードの再利用性や統一された依存関係管理を実現しています。</p>\n    <h2>モノレポの特徴</h2>\n    <h3>統一された依存関係管理</h3>\n    <p>モノレポでは、全てのプロジェクトが同じリポジトリ内で管理されるため、依存関係のバージョン不一致を回避できます。共通のライブラリやツールを全プロジェクトで共有できるため、開発効率が向上します。</p>\n    <h3>コードの再利用</h3>\n    <p>複数のプロジェクトが共通のコードベースを共有できるため、重複コードを削減し、メンテナンス性が向上します。共通のビジネスロジックやユーティリティ関数を一箇所に集約することで、バグ修正や機能追加が容易になります。</p>\n    <h3>効率的な CI/CD</h3>\n    <p>一つのリポジトリで全てのプロジェクトをビルド・テスト・デプロイできるため、CI/CD パイプラインの効率が向上します。変更が他のプロジェクトにどのような影響を与えるかを迅速に確認でき、リリースの品質が向上します。</p>\n    <h3>開発環境の一貫性</h3>\n    <p>全てのプロジェクトで同じ Linting ルールやフォーマットを適用できるため、コードの一貫性が保たれます。また、開発者は一つのリポジトリをクローンするだけで全てのプロジェクトにアクセスできるため、セットアップが容易です。</p>\n    <h3>デメリット</h3>\n    <ol>\n      <li><strong>リポジトリの巨大化</strong>：リポジトリのサイズが大きくなり、クローンやビルドの時間が長くなることがあります。</li>\n      <li><strong>依存関係の複雑化</strong>：依存関係の変更が他のプロジェクトに予期せぬ影響を与える可能性があります。</li>\n      <li><strong>運用の複雑さ</strong>：大規模なモノレポを運用するには、適切なツールや高度な管理スキルが必要です。</li>\n    </ol>\n    <h3>どういう時にモノレポを採用するか</h3>\n    <p>モノレポは、以下のような状況で特に有効です：</p>\n    <ul>\n      <li><strong>プロジェクトが強く関連している場合</strong>：フロントエンドとバックエンドが密接に連携している場合、モノレポにより統一された管理が可能です。</li>\n      <li><strong>コードの再利用や共通ライブラリの利用が多い場合</strong>：複数のプロジェクトで同じライブラリやユーティリティを使用する場合、モノレポにより効率的な管理が実現します。</li>\n      <li><strong>一貫した開発環境や依存関係の管理が重要な場合</strong>：全てのプロジェクトが同じ開発環境と依存関係を共有することで、開発効率と品質が向上します。</li>\n      <li><strong>大規模なチームが一緒に作業する場合</strong>：多くの開発者が同じリポジトリで協力する際に、モノレポは一貫性と効率を提供します。</li>\n    </ul>\n    <h2>モノレポのディレクトリ構造例</h2>\n    <p>モノレポのディレクトリ構造は、プロジェクトの規模や種類、使用する技術スタックによって異なりますが、一般的な構造を以下に示します。</p>\n    <h3>一般的なモノレポディレクトリ構造</h3>\n    <p>※ nx の採用時</p>\n    <pre><code class=\"hljs language-text\">monorepo/\n├── apps/\n│   ├── frontend/\n│   │   ├── src/\n│   │   ├── assets/\n│   │   ├── environments/\n│   │   ├── index.html\n│   │   ├── main.ts\n│   │   ├── styles.css\n│   │   └── ...\n│   ├── backend/\n│   │   ├── src/\n│   │   ├── main.ts\n│   │   ├── app.module.ts\n│   │   └── ...\n│   └── ...\n├── libs/\n│   ├── shared/\n│   │   ├── src/\n│   │   ├── index.ts\n│   │   └── ...\n│   ├── ui/\n│   │   ├── src/\n│   │   ├── index.ts\n│   │   └── ...\n│   └── ...\n├── tools/\n│   ├── scripts/\n│   │   ├── build.js\n│   │   ├── deploy.js\n│   │   └── ...\n│   └── config/\n│       ├── jest.config.js\n│       ├── eslint.config.js\n│       └── ...\n├── node_modules/\n├── nx.json\n├── workspace.json\n├── angular.json (Angularを使用する場合)\n├── package.json\n├── tsconfig.base.json\n└── README.md\n</code></pre>\n    <h3>ディレクトリとファイルの説明</h3>\n    <ul>\n      <li><strong>apps/</strong>: アプリケーションごとのディレクトリ。フロントエンドやバックエンドのプロジェクトが含まれます。\n        <ul>\n          <li><strong>frontend/</strong>: フロントエンドアプリケーションのディレクトリ。</li>\n          <li><strong>backend/</strong>: バックエンドアプリケーションのディレクトリ。</li>\n        </ul>\n      </li>\n      <li><strong>libs/</strong>: ライブラリや共通のコードを格納するディレクトリ。再利用可能なモジュールやコンポーネントが含まれます。\n        <ul>\n          <li><strong>shared/</strong>: フロントエンドとバックエンドで共通して使用するライブラリ。</li>\n          <li><strong>ui/</strong>: フロントエンドで使用する UI コンポーネントのライブラリ。</li>\n        </ul>\n      </li>\n      <li><strong>tools/</strong>: ビルドやデプロイ、その他のスクリプトや設定ファイルを含むディレクトリ。\n        <ul>\n          <li><strong>scripts/</strong>: ビルドやデプロイ用のスクリプト。\n            <ul>\n              <li><code>build.js</code>: ビルドスクリプト。</li>\n              <li><code>deploy.js</code>: デプロイスクリプト。</li>\n            </ul>\n          </li>\n          <li><strong>config/</strong>: Jest や ESLint などの設定ファイル。\n            <ul>\n              <li><code>jest.config.js</code>: Jest の設定ファイル。</li>\n              <li><code>eslint.config.js</code>: ESLint の設定ファイル。</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li><strong>nx.json</strong>: Nx の設定ファイル。プロジェクトの依存関係やビルドの設定を管理します。</li>\n      <li><strong>workspace.json</strong>: Nx のワークスペース設定ファイル。アプリケーションとライブラリの構成を定義します。</li>\n      <li><strong>angular.json</strong>: Angular プロジェクトの設定ファイル（Angular を使用する場合）。</li>\n      <li><strong>tsconfig.base.json</strong>: 共通の TypeScript 設定ファイル。</li>\n    </ul>\n    <h2>モノレポ管理ツールの紹介</h2>\n    <p>モノレポを管理するためのツールとして、Lerna や Nx、Bazel、Yarn Workspaces などがあります。これらのツールは、依存関係の管理やビルドの効率化を支援し、モノレポの運用をスムーズにします。</p>\n    <h2>まとめ</h2>\n    <p>モノレポは、複数のプロジェクトを一つのリポジトリで管理することで、コードの再利用や依存関係の一貫性を向上させ、開発プロセスの効率化を実現します。しかし、リポジトリの巨大化や依存関係の複雑化などの課題も伴います。適切なツールとベストプラクティスを導入することで、モノレポの利点を最大限に活用し、効率的な開発と運用が可能になります。モノレポの導入を検討する際には、プロジェクトの規模やチーム構成、依存関係の複雑さを考慮し、最適な方法を選択することが重要です。</p>\n    <hr>\n    <p>※ この記事は生成 AI によって作成され、一部を編集したものです。</p>\n  </body>\n</html>\n","title":"モダンフロントエンドとモノレポ","date":"2024-07-07","matters":[{"slug":"2023-frontend-developer-roadmap","title":"2023年版Frontend Developer Roadmapを見てみる","date":"2023-08-21"},{"slug":"20250619-bff","title":"BFF（Backend For Frontend）とは","date":"2025-06-19"},{"slug":"20250620-db-transaction-lock","title":"DBのトランザクションとロック","date":"2026-06-24"},{"slug":"20250624-ai-fullstack","title":"イベント「技術の総合格闘技、生成AI時代のフルスタック開発」","date":"2025-06-24"},{"slug":"20250624-til","title":"TIL 2025/06/24","date":"2025-06-24"},{"slug":"20250624-web-tech-future","title":"2030年までのWeb開発","date":"2025-06-24"},{"slug":"20250627-til","title":"TIL 2025/06/27","date":"2025-06-27"},{"slug":"frontend-2025","title":"【React / Next.js / TypeScript 開発で今押さえておくべきこと（2025年版）】","date":"2025-06-19"},{"slug":"interface-merge","title":"TypeScriptでのInterfaceのマージについて","date":"2024-07-07"},{"slug":"interface-vs-types","title":"TypeScriptのinterfaceとtypeの使い分け","date":"2024-07-06"},{"slug":"material-ui","title":"Material UI: モダンなフロントエンド開発の強力なツール","date":"2024-08-16"},{"slug":"monorepo","title":"モダンフロントエンドとモノレポ","date":"2024-07-07"},{"slug":"my-blog-1","title":"【自作ブログ 1】自作ブログを作りたい","date":"2023-02-06"},{"slug":"my-blog-2","title":"【自作ブログ 2】Markdownをparseする","date":"2023-02-19"},{"slug":"react-vs-svelte","title":"React vs Svelte: モダンウェブ開発の新たな選択肢","date":"2024-07-07"}]},"__N_SSG":true}