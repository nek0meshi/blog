{"pageProps":{"content":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <p>※ <a href=\"https://yushi-dev.hatenablog.com/entry/2023/02/06/010419\">https://yushi-dev.hatenablog.com/entry/2023/02/06/010419</a> の転載です。</p>\n    <p>現在はこちらのはてなブログで記事を書いていますが、ブログを自作してみたいなとも思いました。</p>\n    <p>実際に移設するかどうかは置いておいて、とりあえず作ってみます。</p>\n    <h3>方針を考える</h3>\n    <p>フロントエンドについては、最近のトレンドに倣って下記を採用します。</p>\n    <ul>\n      <li>TypeScript</li>\n      <li>React</li>\n      <li>Next.js</li>\n      <li>Styled Components</li>\n    </ul>\n    <p>記事管理について、バックエンドのシステムを組んだり、ヘッドレス CMS の導入も考えられますが、<br>初期段階では一旦 Markdown ファイルで管理することとします。</p>\n    <p>デプロイ先は GitHub Pages とします。<br>無料で利用できますし、ソース管理も GitHub で行うので、あとは少しの設定や yml ファイルを 1 つ用意するだけで済みます。<br>楽ちんです。</p>\n    <p><a href=\"https://docs.github.com/ja/pages/getting-started-with-github-pages/about-github-pages\">https://docs.github.com/ja/pages/getting-started-with-github-pages/about-github-pages</a></p>\n    <h3>プロジェクト作成</h3>\n    <p>プロジェクトの土台を作っていきます。</p>\n    <h4>editorconfig</h4>\n    <p>editorconfig を利用して、IDE が自動でフォーマットしてくれるようにします。</p>\n    <pre><code>(.editorconfig)\n\n# EditorConfig is awesome: https://EditorConfig.org\n\nroot = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[Makefile]\nindent_style = tab\n\n[*.md]\ntrim_trailing_whitespace = false\n</code></pre>\n    <h4>asdf</h4>\n    <p>node.js のバージョンは asdf で管理します。</p>\n    <p><a href=\"https://asdf-vm.com/:embed\">https://asdf-vm.com/:embed</a></p>\n    <p>node.js の他にも複数の言語を一括で管理できることと、手順が簡略なことがメリットです。</p>\n    <pre><code class=\"hljs language-sh\">asdf <span class=\"hljs-built_in\">local</span> nodejs [node.jsのバージョン]\n</code></pre>\n    <h4>Next.js のプロジェクト作成</h4>\n    <p>npx を利用して Next.js のプロジェクトを作成します。<br>typescript を適用します。</p>\n    <pre><code class=\"hljs language-sh\">npx create-next-app@latest --typescript\n</code></pre>\n    <h4>Prettier の導入</h4>\n    <p>ひとまず Formatter の Prettier だけ導入しておきます。<br>これを入れれば、簡単にソースコードのフォーマットを綺麗に保つことができます。</p>\n    <p><a href=\"https://prettier.io/:embed\">https://prettier.io/:embed</a></p>\n    <pre><code class=\"hljs language-sh\">npm i -D prettier\n</code></pre>\n    <p>設定ファイルを用意します。</p>\n    <pre><code class=\"hljs language-yaml\"><span class=\"hljs-string\">(.prettierrc.yml)</span>\n\n<span class=\"hljs-attr\">singleQuote:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">semi:</span> <span class=\"hljs-literal\">false</span>\n</code></pre>\n    <p>Next.js が自動生成するファイルを、Format 対象から除外しておきます。</p>\n    <pre><code>(.prettier)\n\n.next\n</code></pre>\n    <p>実行コマンドを追加します。</p>\n    <pre><code class=\"hljs language-json\">(package.json)\n<span class=\"hljs-punctuation\">{</span>\n  ...\n  <span class=\"hljs-string\">\"scripts: {\n    ...\n    \"</span>prettier<span class=\"hljs-string\">\": \"</span>prettier -c .<span class=\"hljs-string\">\",\n    \"</span>prettier<span class=\"hljs-punctuation\">:</span>fix<span class=\"hljs-string\">\": \"</span>prettier -w .<span class=\"hljs-string\">\"\n    ...\n  }\n}\n</span></code></pre>\n    <p>ここまでで、プロジェクトの土台が作れました。</p>\n    <h3>Pull Request</h3>\n    <p><a href=\"https://github.com/nek0meshi/blog/pull/2/commits\">https://github.com/nek0meshi/blog/pull/2/commits</a></p>\n    <h3>あとがき</h3>\n    <p>最近スノボに行ったんですが、あばらを折ったみたいです。</p>\n  </body>\n</html>\n","title":"【自作ブログ 1】自作ブログを作りたい","date":"2023-02-06","matters":[{"slug":"2023-frontend-developer-roadmap","title":"2023年版Frontend Developer Roadmapを見てみる","date":"2023-08-21"},{"slug":"20250619-bff","title":"BFF（Backend For Frontend）とは","date":"2025-06-19"},{"slug":"20250620-db-transaction-lock","title":"DBのトランザクションとロック","date":"2026-06-24"},{"slug":"20250624-ai-fullstack","title":"イベント「技術の総合格闘技、生成AI時代のフルスタック開発」","date":"2025-06-24"},{"slug":"20250624-til","title":"TIL 2025/06/24","date":"2025-06-24"},{"slug":"20250624-web-tech-future","title":"2030年までのWeb開発","date":"2025-06-24"},{"slug":"20250627-til","title":"TIL 2025/06/27","date":"2025-06-27"},{"slug":"frontend-2025","title":"【React / Next.js / TypeScript 開発で今押さえておくべきこと（2025年版）】","date":"2025-06-19"},{"slug":"interface-merge","title":"TypeScriptでのInterfaceのマージについて","date":"2024-07-07"},{"slug":"interface-vs-types","title":"TypeScriptのinterfaceとtypeの使い分け","date":"2024-07-06"},{"slug":"material-ui","title":"Material UI: モダンなフロントエンド開発の強力なツール","date":"2024-08-16"},{"slug":"monorepo","title":"モダンフロントエンドとモノレポ","date":"2024-07-07"},{"slug":"my-blog-1","title":"【自作ブログ 1】自作ブログを作りたい","date":"2023-02-06"},{"slug":"my-blog-2","title":"【自作ブログ 2】Markdownをparseする","date":"2023-02-19"},{"slug":"react-vs-svelte","title":"React vs Svelte: モダンウェブ開発の新たな選択肢","date":"2024-07-07"}]},"__N_SSG":true}