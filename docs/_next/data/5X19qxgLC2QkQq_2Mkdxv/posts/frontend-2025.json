{"pageProps":{"content":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <p>■ 1. React の基礎・本質</p>\n    <ul>\n      <li>Strict Mode の意味と影響（開発中の意図的な再レンダリング）</li>\n      <li>useEffect の依存配列・クリーンアップ・設計判断</li>\n      <li>再レンダリングの原因特定と最適化（React DevTools, Profiler）</li>\n      <li>メモ化（memo/useMemo/useCallback）の正しい使いどころ</li>\n    </ul>\n    <p>■ 2. Next.js（App Router 前提）</p>\n    <ul>\n      <li>App Router と Page Router の違い</li>\n      <li>Server Components（RSC）と Client Components の責務分離</li>\n      <li>Server Actions：<code>\"use server\"</code>と mutation の書き方</li>\n      <li>Layout.tsx と Template.tsx の役割の違い</li>\n      <li>Streaming UI の設計（suspense / loading.tsx）</li>\n    </ul>\n    <p>■ 3. 型安全・TypeScript</p>\n    <ul>\n      <li>Props/State の型定義と再利用</li>\n      <li>Union/Discriminated Union を使った型安全なコンポーネント設計</li>\n      <li>API レスポンスの型（zod / openapi-typescript などでスキーマ生成）</li>\n      <li>Utility 型の使いこなし（Partial, Omit, Record, ReturnType 等）</li>\n    </ul>\n    <p>■ 4. 状態管理の最適解</p>\n    <ul>\n      <li>Zustand / Jotai / Redux Toolkit のどれを選ぶかの基準</li>\n      <li>Server Component 中心でどう状態を持たせるか（URL param / formAction）</li>\n      <li>Context API はいつ使う？ → Theme や Auth など「グローバルで滅多に変わらない値」</li>\n    </ul>\n    <p>■ 5. API 連携とデータ取得</p>\n    <ul>\n      <li>fetch / axios の違いより「キャッシュ方針（SWR/React Query/独自）」の設計が重要</li>\n      <li><code>cache</code>, <code>revalidate</code>, <code>fetch</code>の Next.js オプション理解（App Router 向け）</li>\n      <li>Form Action での mutation、React Server Actions との連携方法</li>\n    </ul>\n    <p>■ 6. UI 設計とアクセシビリティ</p>\n    <ul>\n      <li>コンポーネント設計の責務分離（Presentational / Container / Domain Model）</li>\n      <li>ARIA 属性、フォーカスマネジメント</li>\n      <li>デザインシステムとの連携（Shadcn UI / Radix UI など）</li>\n    </ul>\n    <p>■ 7. テスト戦略</p>\n    <ul>\n      <li>Jest + React Testing Library（ユースケースベース）</li>\n      <li>Storybook + Play（インタラクティブテスト）</li>\n      <li>Playwright（E2E）との住み分け</li>\n      <li>RSC 環境におけるテストの落とし所</li>\n    </ul>\n    <p>■ 8. パフォーマンス最適化</p>\n    <ul>\n      <li>Dynamic Import + Suspense</li>\n      <li>Lazy loading（画像、チャートなど）</li>\n      <li>Bundle 分析（Next.js の analyze ツール）</li>\n      <li>RSC と Streaming の活用で「初期 LCP」を減らす工夫</li>\n    </ul>\n    <p>■ 9. 開発体験</p>\n    <ul>\n      <li>ESLint + Prettier + TypeScript の統合（ルール整理）</li>\n      <li><code>tsx</code>, <code>*.d.ts</code>, <code>@types/</code>の理解と整備</li>\n      <li>Turbopack or Vite でのビルドチューニング</li>\n      <li>Git hooks（lint-staged, husky）で CI 品質向上</li>\n    </ul>\n    <p>■ 10. デプロイ・環境分離</p>\n    <ul>\n      <li>Vercel での環境分け（Preview/Production）</li>\n      <li>.env.local, .env.production の使い分け</li>\n      <li>SSG, ISR, SSR, RSC の最適な選定とパフォーマンス影響</li>\n      <li></li>\n    </ul>\n  </body>\n</html>\n","title":"【React / Next.js / TypeScript 開発で今押さえておくべきこと（2025年版）】","date":"2025-06-19","matters":[{"slug":"2023-frontend-developer-roadmap","title":"2023年版Frontend Developer Roadmapを見てみる","date":"2023-08-21"},{"slug":"20250619-bff","title":"BFF（Backend For Frontend）とは","date":"2025-06-19"},{"slug":"20250620-db-transaction-lock","title":"DBのトランザクションとロック","date":"2026-06-24"},{"slug":"20250624-ai-fullstack","title":"イベント「技術の総合格闘技、生成AI時代のフルスタック開発」","date":"2025-06-24"},{"slug":"20250624-til","title":"TIL 2025/06/24","date":"2025-06-24"},{"slug":"20250624-web-tech-future","title":"2030年までのWeb開発","date":"2025-06-24"},{"slug":"20250627-til","title":"TIL 2025/06/27","date":"2025-06-27"},{"slug":"frontend-2025","title":"【React / Next.js / TypeScript 開発で今押さえておくべきこと（2025年版）】","date":"2025-06-19"},{"slug":"interface-merge","title":"TypeScriptでのInterfaceのマージについて","date":"2024-07-07"},{"slug":"interface-vs-types","title":"TypeScriptのinterfaceとtypeの使い分け","date":"2024-07-06"},{"slug":"material-ui","title":"Material UI: モダンなフロントエンド開発の強力なツール","date":"2024-08-16"},{"slug":"monorepo","title":"モダンフロントエンドとモノレポ","date":"2024-07-07"},{"slug":"my-blog-1","title":"【自作ブログ 1】自作ブログを作りたい","date":"2023-02-06"},{"slug":"my-blog-2","title":"【自作ブログ 2】Markdownをparseする","date":"2023-02-19"},{"slug":"react-vs-svelte","title":"React vs Svelte: モダンウェブ開発の新たな選択肢","date":"2024-07-07"}]},"__N_SSG":true}